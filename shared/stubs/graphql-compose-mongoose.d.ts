/** Declaration file generated by dts-gen, and then edited by hand following the needs */

declare module 'graphql-compose-mongoose' {
    import { TypeComposer } from 'graphql-compose';

    export const ComplexTypes: {
        ARRAY: string;
        DOCUMENT_ARRAY: string;
        EMBEDDED: string;
        ENUM: string;
        MIXED: string;
        REFERENCE: string;
        SCALAR: string;
    };

    export default composeWithMongoose;

    export function arrayToGraphQL(field: any, ...args: any[]): any;

    export function composeWithMongoose(model: any, ...args: any[]): TypeComposer;

    export function convertFieldToGraphQL(field: any, ...args: any[]): any;

    export function convertModelToGraphQL(model: any, typeName: any): any;

    export function convertSchemaToGraphQL(schema: any, typeName: any): any;

    export function deriveComplexType(field: any): any;

    export function documentArrayToGraphQL(field: any, ...args: any[]): any;

    export function dotPathsToEmbedded(fields: any): any;

    export function embeddedToGraphQL(field: any, ...args: any[]): any;

    export function enumToGraphQL(field: any, ...args: any[]): any;

    export function getFieldsFromModel(model: any): any;

    export function mixedToGraphQL(field: any): any;

    export function referenceToGraphQL(field: any, ...args: any[]): any;

    export function scalarToGraphQL(field: any): any;

    export namespace GraphQLMongoID {
        const description: string;

        const name: string;

        function inspect(): any;

        function parseLiteral(valueNode: any): any;

        function parseValue(value: any): any;

        function serialize(value: any): any;

        function toJSON(): any;

        function toString(): any;

    }

    export namespace mongooseTypeStorage {
        const size: number;

        function clear(a: any, b: any): any;

        function entries(a: any, b: any): any;

        function forEach(a: any, b: any): any;

        function get(a: any, b: any): any;

        function getOrSet(typeName: any, gqType: any): any;

        function has(a: any, b: any): any;

        function keys(a: any, b: any): any;

        function set(a: any, b: any): any;

        function toJSON(): any;

        function values(a: any, b: any): any;

    }
}
